name: Build and Push Docker Image

on:
  push:
    branches: [main]

env:
  BRANCH_NAME: ${{ github.head_ref || github.ref_name }}

permissions:
  id-token: write
  contents: read
  security-events: write

jobs:	
  build-jar-and-dockerize:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v3
        with:
          role-to-assume: ${{ secrets.ROLE_ARN }}
          role-session-name: samplerolesession
          aws-region: eu-west-1

      - name: Set up JDK 17
        uses: actions/setup-java@v3
        with:
          java-version: '17'
          distribution: 'temurin'
          cache: maven

      - name: Build with Maven
        run: |
          mvn clean install
          ls -lahrt target/

      - name: Login to Amazon ECR
        id: login-pf-aws-ecr
        uses: aws-actions/amazon-ecr-login@v1

      - name: Build and push the Docker image to Amazon ECR
        id: docker-build
        env:
          ECR_REGISTRY: ${{ steps.login-pf-aws-ecr.outputs.registry }}
          ECR_REPOSITORY: ${{secrets.REPO_NAME}}

        run: |
          COMMIT_ID=$(echo "${{ github.sha }}" | head -c 5)
          export IMAGE_TAG="${BRANCH_NAME}-${COMMIT_ID}"
          echo "IMAGE_TAG=${IMAGE_TAG}" >> $GITHUB_OUTPUT
          docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG .
          docker images

      - name: Image Scan
        env:
          ECR_REGISTRY: ${{ steps.login-pf-aws-ecr.outputs.registry }}
          ECR_REPOSITORY: ${{ secrets.REPO_NAME }}
          TRIVY_SECRET_SCAN: 'true'
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: ${{ env.ECR_REGISTRY }}/${{ env.ECR_REPOSITORY }}:${{steps.docker-build.outputs.IMAGE_TAG}}
          format: 'table'
          exit-code: '1'
          ignore-unfixed: true
          vuln-type: 'os,library'
          severity: 'CRITICAL,HIGH'

      - name: Push Docker image to Amazon ECR
        id: docker-push
        env:
          ECR_REGISTRY: ${{ steps.login-pf-aws-ecr.outputs.registry }}
          ECR_REPOSITORY: ${{ secrets.REPO_NAME }}

        run: |
          docker push $ECR_REGISTRY/$ECR_REPOSITORY:${{steps.docker-build.outputs.IMAGE_TAG}}
